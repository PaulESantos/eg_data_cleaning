---
title: "Data Cleaning: Exercises"
format: 
  html:
    code-fold: true
    code-summary: "Show the code solution"
---

# Instructions:

**Recommended:** Complete these exercises in the dedicated Posit Cloud work space, which comes with

1.  all packages pre-installed, and

2.  an Rmarkdown document to fill in.

It will be helpful to peek here to verify that your tables generated in Posit Cloud match the desired output (or even to peek at the Code Solution if your cleaned tables don't look right).

[Click here to enter the R/Medicine Posit cloud work space](https://rstudio.cloud/spaces/299322/join?access_code=Vnp96stsVIDLiEJI7AtHAQ4GB1gsptQgnOGb99_N){target="_blank"}

**Otherwise:** Follow along this document, work on your personal computer, and challenge yourself **not to peek** at the code solutions until you have completed the exercise.

# Packages

```{r}
#| label: packages
#| message: false
#| echo: true
#| code-fold: false
#| warning: false
library(tidyverse) # general use
library(janitor)   # handy data cleaning functions
library(readxl)    # import excel files
library(here)      # find files in a project
library(gtsummary) # presentation ready summary tables  
```

# The Data

The data for each section will start out as messy Excel files of the type your well-meaning clinical colleague will have used to collect data from the local electronic medical record (EMR), with typos, data problems, and often untidy data structures.

Essentially, your job is to turn the messy Excel data beast (on the left) into the tidy data on the right.

![Taming the Data Beast, by Allison Horst](images/data_beast_allison_horst.jpeg)

# ![Crystal Lewis](images/Crystal_circle.png){width="15%"} Data management best practices

## CL1

## CL2

# ![Shannon Pileggi](images/Shannon_circle.png){width="15%"} Data cleaning fundamentals

## Set up



```{r}
#| code-fold: false
#| message: false
#| warning: false
# import raw data
df_raw <- read_excel(
  path = here("data", "messy_uc.xlsx"),
  sheet = "Data",
  skip = 5
)

# do initial cleaning of variable names and removing empty rows/columns
df_clean <- df_raw |> 
  janitor::clean_names() |> 
  janitor::remove_empty(which = c("rows", "cols"))

```


## SP1



1. Explore the values of `race`. 

```{r}
df_clean |> count(race)
```

2. In the `df_clean` data set, create a new variable named `race_clean` that cleans the
coding of `race` (combine "African-American" & "afromerican"; "H/API" & "Mixed" & "Other").


```{r}
df_clean <- df_raw |> 
  janitor::clean_names() |> 
  janitor::remove_empty(which = c("rows", "cols")) |> 
  mutate(
    race_clean = case_when(
      race %in% c("African-American", "afromerican") ~ "African-American",
      race %in% c("H/API", "Mixed", "Other") ~ "Other",
      TRUE ~ race
    )
  )
```


3. Confirm the new `race_clean` variable is coded correctly.

```{r}
df_clean |> 
  count(race_clean, race)
```


## SP2

1. Explore the type of and values of `start_plt`. 

```{r}
df_clean |> 
  count(start_plt)

df_clean |> 
  select(start_plt) |> 
  glimpse()

df_clean[["start_plt"]]
```


2. In the `df_clean` data set, create a new variable named `start_plt_clean` that corrects any unusual
values and assigns the correct variable type.

```{r}
#| warning: false
df_clean <- df_raw |> 
  janitor::clean_names() |> 
  janitor::remove_empty(which = c("rows", "cols")) |> 
  mutate(
    race_clean = case_when(
      race %in% c("African-American", "afromerican") ~ "African-American",
      race %in% c("H/API", "Mixed", "Other") ~ "Other",
      TRUE ~ race
    ),
    start_plt_clean = parse_number(start_plt) 
  )
```

3. Confirm the new `start_plt_clean` variable is coded correctly.

```{r}
#| warning: false
df_clean |> 
  count(start_plt_clean, start_plt)

df_clean |> 
  select(start_plt, start_plt_clean) |> 
  glimpse()

df_clean[["start_plt_clean"]]
```


## SP3

1. Explore the type of and values of `race_clean`. 

```{r}
df_clean |> 
  count(race_clean)
```


2. Convert the `race_clean` variable to a factor such that the most common values present in
order in a summary table.

```{r}
#| warning: false
df_clean <- df_raw |> 
  janitor::clean_names() |> 
  janitor::remove_empty(which = c("rows", "cols")) |> 
  mutate(
    race_clean = case_when(
      race %in% c("African-American", "afromerican") ~ "African-American",
      race %in% c("H/API", "Mixed", "Other") ~ "Other",
      TRUE ~ race
    ) |> fct_infreq(),
    start_plt_clean = parse_number(start_plt) 
  )
```

3. Confirm the new coding of `race_clean`.

```{r}
df_clean |> 
  count(race_clean, race)


df_clean |> 
  count(race_clean)
```

# ![Peter Higgins](images/Peter_circle.jpg){width="15%"} Data wrangling & reshaping

## PH1

## PH2



# Session info

```{r}
#| label: session-info
#| eval: true
#| code-fold: false
devtools::session_info()
```
