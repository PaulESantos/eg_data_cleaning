# Stage 1 cleaning

```{r}
#| echo: false
#| message: false
library(readxl)
library(tidyverse)
library(janitor)
library(here)
library(gtsummary)
```


```{r}
#| echo: false
df_raw <- read_excel(
  path = here("data", "messy_uc.xlsx"),
  sheet = "Data",
  skip = 5
)
```



## Variable names

Original variable names in excel: 

![](images/var_names_1.PNG)

. . .

<br>

Variable names import as shown, with modifications from `readxl::read_excel()` to ensure uniqueness:

![](images/var_names_2.PNG)



## Variable names, cleaner

Variable names as imported:

![](images/var_names_2.PNG)

. . .

<br>

`janitor::clean_names()` removes special characters and implements snake case by default:


```{r}
df_clean <- df_raw |> 
  janitor::clean_names() 
```

![](images/var_names_3.PNG)

## Remove empty columns or rows


::: panel-tabset

### Problem

```{r}
#| eval: true
df_clean |> 
  select(pat_id, race:start_bp) |> 
  slice(13:18)
```

### Solution

```{r}
#| eval: true
#| code-line-numbers: "3"
df_clean <- df_raw |> 
  janitor::clean_names() |> 
  janitor::remove_empty(which = c("rows", "cols"))
```

<br>

```{r}
df_clean |> 
  select(pat_id, race:start_bp) |> 
  slice(13:18)
```

### Confirm

::: columns
::: {.column width="35%"}
```{r}
#
df_raw |>
  janitor::clean_names() |> 
  glimpse()
```
:::

::: {.column width="65%"}
```{r}
df_raw |> 
  janitor::clean_names() |> 
  janitor::remove_empty(which = c("rows", "cols")) |> 
  glimpse()
```
:::

:::

:::


## Recoding

::: panel-tabset

### Problem


```{r}
df_clean |> 
  count(ethnic)
```


### Solution

```{r}
#| code-line-numbers: 4-9
df_clean <- df_raw |>
  janitor::clean_names() |> 
  janitor::remove_empty(which = c("rows", "cols")) |> 
  mutate(
    ethnic_clean = case_when(
      ethnic %in%  c("hispanic", "Hispanic", "hispamnic") ~ "hispanic",
      ethnic %in%  c("NOT hispanic", "not hispanic") ~ "not hispanic",
    )
  )

df_clean |> 
  count(ethnic_clean)
```


### Confirm

```{r}
df_clean |> 
  count(ethnic_clean, ethnic)
```

:::

## Exercise


<br>

Complete Data Cleaning Fundamentals Exercise SP1.

<br>

[--> Take me to the exercises <--](https://shannonpileggi.github.io/rmedicine-data-cleaning-2023/exercises.html){target="_blank"}

```{r}
#| echo: false
#| cache: false
countdown(minutes = 5, font_size = "4em")
```


## Replace values with missing



::: panel-tabset

### Problem

::: columns

::: {.column width="50%"}

```{r}
df_clean |> 
  count(end_na) 
```

:::

::: {.column width="50%"}

```{r}
df_clean |> 
  ggplot(aes(x = end_na)) +
  geom_histogram()
```
:::

:::

### Solution

```{r}
#| code-line-numbers: "9"
df_clean <- df_raw |>
  janitor::clean_names() |> 
  janitor::remove_empty(which = c("rows", "cols")) |> 
  mutate(
    ethnic_clean = case_when(
      ethnic %in%  c("hispanic", "Hispanic", "hispamnic") ~ "hispanic",
      ethnic %in%  c("NOT hispanic", "not hispanic") ~ "not hispanic",
    ),
    end_na_clean = na_if(end_na, -99)
  ) 
```


### Confirm

::: columns

::: {.column width="50%"}

```{r}
df_clean |> 
  count(end_na, end_na_clean) 
```

:::

::: {.column width="50%"}

```{r}
df_clean |> 
  ggplot(aes(x = end_na_clean)) +
  geom_histogram()
```
:::

:::

:::


## Incorrect variable type


::: panel-tabset

### Problem


::: columns

::: {.column width="50%"}

```{r}
df_raw |> 
  select(end_emo) |> 
  glimpse()
```

<br>


::: {.fragment}
```{r, warning = TRUE}
mean(df_raw[["end_emo"]], na.rm = TRUE)
```
:::

:::

::: {.column width="50%" .fragment}

```{r}
df_raw[["end_emo"]]
```

:::

:::


### Solution

```{r}
#| code-line-numbers: "10"
df_clean <- df_raw |>
  janitor::clean_names() |> 
  janitor::remove_empty(which = c("rows", "cols")) |> 
  mutate(
    ethnic_clean = case_when(
      ethnic %in%  c("hispanic", "Hispanic", "hispamnic") ~ "hispanic",
      ethnic %in%  c("NOT hispanic", "not hispanic") ~ "not hispanic",
    ),
    end_na_clean = na_if(end_na, -99),
    end_emo_clean = na_if(end_emo, "not done") |> as.numeric()
  ) 
```

### Confirm

::: columns

::: {.column width="50%"}

```{r}
df_clean |> 
  select(end_emo_clean) |> 
  glimpse()
```

<br>


::: {.fragment}
```{r, error=TRUE}
mean(df_clean[["end_emo_clean"]], na.rm = TRUE)
```
:::

:::

::: {.column width="50%" .fragment}

```{r}
df_clean |> 
  count(end_emo_clean, end_emo)
```

:::

:::

:::


## Correcting dates

::: panel-tabset

### Problem


```{r}
df_raw |> 
  select(start_date) |> 
  glimpse()
```


<br>

::: {.fragment}

```{r}
df_raw[["start_date"]]
```

:::

### Solution

```{r}
#| code-line-numbers: "11"
df_clean <- df_raw |>
  janitor::clean_names() |> 
  janitor::remove_empty(which = c("rows", "cols")) |> 
  mutate(
    ethnic_clean = case_when(
      ethnic %in%  c("hispanic", "Hispanic", "hispamnic") ~ "hispanic",
      ethnic %in%  c("NOT hispanic", "not hispanic") ~ "not hispanic",
    ),
    end_na_clean = na_if(end_na, -99),
    end_emo_clean = na_if(end_emo, "not done") |> as.numeric(),
    start_date_clean = janitor::convert_to_date(start_date)
  ) 
```

### Confirm

::: columns

::: {.column width="50%"}

```{r}
df_clean |> 
  select(start_date, start_date_clean) |> 
  glimpse()
```

:::

::: {.column width="50%"}

```{r}
df_clean |> 
  count(start_date, start_date_clean) 
```

:::

:::

:::

## Extracting numbers from text

::: panel-tabset

### Problem


::: columns

::: {.column width="50%"}

```{r}
df_raw |> 
  select(start_na) |> 
  glimpse()
```

<br>


::: {.fragment}
```{r, warning = TRUE}
mean(df_raw[["start_na"]], na.rm = TRUE)
```
:::

:::

::: {.column width="50%" .fragment}

```{r}
df_raw[["start_na"]]
```

:::

:::

### Solution

```{r}
#| code-line-numbers: "11"
df_clean <- df_raw |>
  janitor::clean_names() |> 
  janitor::remove_empty(which = c("rows", "cols")) |> 
  mutate(
    ethnic_clean = case_when(
      ethnic %in%  c("hispanic", "Hispanic", "hispamnic") ~ "hispanic",
      ethnic %in%  c("NOT hispanic", "not hispanic") ~ "not hispanic",
    ),
    end_na_clean = na_if(end_na, -99),
    end_emo_clean = na_if(end_emo, "not done") |> as.numeric(),
    start_na_clean = parse_number(start_na)
  ) 
```

### Confirm

::: columns

::: {.column width="50%"}

```{r}
df_clean |> 
  select(start_na_clean) |> 
  glimpse()
```

<br>


::: {.fragment}
```{r, error=TRUE}
mean(df_clean[["start_na_clean"]], na.rm = TRUE)
```
:::

:::

::: {.column width="50%" .fragment}

```{r}
df_clean |> 
  count(start_na_clean, start_na)
```

:::

:::

:::


## Exercise


<br>

Complete Data Cleaning Fundamentals Exercise SP2.

<br>

[--> Take me to the exercises <--](https://shannonpileggi.github.io/rmedicine-data-cleaning-2023/exercises.html){target="_blank"}

```{r}
#| echo: false
#| cache: false
countdown(minutes = 5, font_size = "4em")
```



## Character variable should be a factor


::: panel-tabset

### Problem


::: columns

::: {.column width="35%"}


```{r}
df_clean |> 
  count(treatment)
```

<br>

::: {.fragment}
```{r}
df_clean |> 
  count(ethnic_clean)
```
:::


:::



::: {.column width="65%" .fragment}

```{r}
df_clean |> 
  select(treatment, ethnic_clean) |> 
  glimpse()
```


::: {.fragment}
```{r}
df_clean |> 
  select(treatment, ethnic_clean) |> 
  tbl_summary(by = treatment)
```
:::

:::

:::


### Solution

```{r}
#| code-line-numbers: "8,12"
df_clean <- df_raw |>
  janitor::clean_names() |> 
  janitor::remove_empty(which = c("rows", "cols")) |> 
  mutate(
    ethnic_clean = case_when(
      ethnic %in%  c("hispanic", "Hispanic", "hispamnic") ~ "hispanic",
      ethnic %in%  c("NOT hispanic", "not hispanic") ~ "not hispanic",
    ) |> fct_infreq(),
    end_na_clean = na_if(end_na, -99),
    end_emo_clean = na_if(end_emo, "not done") |> as.numeric(),
    start_na_clean = parse_number(start_na),
    treatment = fct_relevel(treatment, "upa", "uste", "oza")
  ) 
```

<br>

See the [forcats package](https://forcats.tidyverse.org/) for other factor handling solutions.

### Confirm

::: columns

::: {.column width="35%"}


```{r}
df_clean |> 
  count(treatment)
```

<br>

::: {.fragment}
```{r}
df_clean |> 
  count(ethnic_clean)
```
:::


:::



::: {.column width="65%" .fragment}

```{r}
df_clean |> 
  select(treatment, ethnic_clean) |> 
  glimpse()
```


::: {.fragment}
```{r}
df_clean |> 
  select(treatment, ethnic_clean) |> 
  tbl_summary(by = treatment)
```
:::

:::

:::

:::

## Exercise


<br>

Complete Data Cleaning Fundamentals Exercise SP3.

<br>

[--> Take me to the exercises <--](https://shannonpileggi.github.io/rmedicine-data-cleaning-2023/exercises.html){target="_blank"}

```{r}
#| echo: false
#| cache: false
countdown(minutes = 5, font_size = "4em")
```


## Separating values


::: panel-tabset

### Problem

```{r}
df_clean |> 
  select(start_bp) |> 
  glimpse()
```

<br>

::: {.fragment}
```{r, error=TRUE}
mean(df_clean[["start_bp"]], na.rm = TRUE)
```
:::
<br>


::: {.fragment}
```{r}
df_clean[["start_bp"]]
```
:::

### Solution


```{r}
#| code-line-numbers: "14,15"
df_clean <- df_raw |>
  janitor::clean_names() |> 
  janitor::remove_empty(which = c("rows", "cols")) |> 
  mutate(
    ethnic_clean = case_when(
      ethnic %in%  c("hispanic", "Hispanic", "hispamnic") ~ "hispanic",
      ethnic %in%  c("NOT hispanic", "not hispanic") ~ "not hispanic",
    ) |> fct_infreq(),
    end_na_clean = na_if(end_na, -99),
    end_emo_clean = na_if(end_emo, "not done") |> as.numeric(),
    start_na_clean = parse_number(start_na),
    treatment = fct_relevel(treatment, "upa", "uste", "oza")
    ) |>  
  separate_wider_delim(start_bp, delim ="/", names = c("bp_systolic", "bp_diastolic"), cols_remove = FALSE) |> 
  mutate(across(c(bp_systolic, bp_diastolic), as.numeric)) 
```

### Confirm

::: columns

::: {.column width="50%"}


```{r}
df_clean |> 
  select(start_bp, bp_systolic, bp_diastolic) |> 
  glimpse()
```
<br>

::: {.fragment}
```{r, error=TRUE}
mean(df_clean[["bp_systolic"]], na.rm = TRUE)
mean(df_clean[["bp_diastolic"]], na.rm = TRUE)
```
:::

:::

::: {.column width="50%"}

::: {.fragment}
```{r}
df_clean[["bp_systolic"]]
df_clean[["bp_diastolic"]]
```
:::

:::

:::

:::

## Assigning labels


::: panel-tabset

### Problem

What does anything mean?

```{r}
#| eval: false
view(df_clean)
```

<br>

![](images/df_nolabels.PNG)

### Solution 1

```{r}
# first import codebook
df_codebook <- read_excel(
  path = here("data", "messy_uc.xlsx"),
  sheet = "Codebook"
)
df_codebook
```


### Solution 2

```{r}
# second create a named vector of variable names and variable labels
vec_variables <- df_codebook |> 
  select(Variable, Details) |> 
  deframe()

vec_variables
```

### Solution 3



```{r}
#| code-line-numbers: "17,18|19,20,21,22,23,24,25,26"
# assign labels to the data set
df_clean <- df_raw |>
  janitor::clean_names() |> 
  janitor::remove_empty(which = c("rows", "cols")) |> 
  mutate(
    ethnic_clean = case_when(
      ethnic %in%  c("hispanic", "Hispanic", "hispamnic") ~ "hispanic",
      ethnic %in%  c("NOT hispanic", "not hispanic") ~ "not hispanic",
    ) |> fct_infreq(),
    end_na_clean = na_if(end_na, -99),
    end_emo_clean = na_if(end_emo, "not done") |> as.numeric(),
    start_na_clean = parse_number(start_na),
    treatment = fct_relevel(treatment, "upa", "uste", "oza")
    ) |>  
  separate_wider_delim(start_bp, delim ="/", names = c("bp_systolic", "bp_diastolic"), cols_remove = FALSE) |> 
  mutate(across(c(bp_systolic, bp_diastolic), as.numeric)) |> 
  # assign labels to all variables from the codebook
  labelled::set_variable_labels(!!!vec_variables, .strict = FALSE) |> 
  # assign labels to new derived variables that did not exist in the code book
  labelled::set_variable_labels(
    ethnic_clean = "Ethnicity",
    end_na_clean = "Sodium level in serum at end",
    end_emo_clean = "Emotional symptom score at end",
    bp_systolic = "Systolic blood pressure",
    bp_diastolic = "Diastolic blood pressure"
  )
```

### Confirm 1

```{r}
#| eval: false
# view entire data set
df_clean |> view()
```


<br>

![](images/df_yeslabels.PNG)

### Confirm 2

```{r}
# view structure of data frame
df_clean |> str()
```

:::
